yarn run v1.22.22
warning package.json: No license field
$ /home/andrew/akashjs/node_modules/.bin/vitest run --reporter=json
{"numTotalTestSuites":75,"numPassedTestSuites":73,"numFailedTestSuites":2,"numPendingTestSuites":0,"numTotalTests":90,"numPassedTests":30,"numFailedTests":60,"numPendingTests":0,"numTodoTests":0,"startTime":1752508564270,"success":false,"testResults":[{"assertionResults":[],"startTime":1752508564270,"endTime":1752508564270,"status":"failed","message":"Transform failed with 1 error:\n/home/andrew/akashjs/packages/core/src/modules/deployments.ts:233:9: ERROR: Multiple exports with the same name \"DeploymentManager\"","name":"/home/andrew/akashjs/packages/core/src/index.test.ts"},{"assertionResults":[{"ancestorTitles":["","AuditManager","createAuditRequest"],"fullName":" AuditManager createAuditRequest should create audit request successfully","status":"failed","title":"should create audit request successfully","duration":5,"failureMessages":["auditManager.createAuditRequest is not a function"],"location":{"line":43,"column":41}},{"ancestorTitles":["","AuditManager","createAuditRequest"],"fullName":" AuditManager createAuditRequest should throw error for invalid audit parameters","status":"failed","title":"should throw error for invalid audit parameters","duration":0,"failureMessages":["auditManager.createAuditRequest is not a function"],"location":{"line":66,"column":33}},{"ancestorTitles":["","AuditManager","getAuditors"],"fullName":" AuditManager getAuditors should list all available auditors","status":"failed","title":"should list all available auditors","duration":1,"failureMessages":["auditManager.getAuditors is not a function"],"location":{"line":91,"column":41}},{"ancestorTitles":["","AuditManager","getProviderAudits"],"fullName":" AuditManager getProviderAudits should get audit records for provider","status":"failed","title":"should get audit records for provider","duration":8,"failureMessages":["expected { owner: 'akash1provider', …(2) } to match object { auditId: { …(3) }, …(4) }\n(2 matching properties omitted from actual)"],"location":{"line":124,"column":25}},{"ancestorTitles":["","AuditManager","getProviderAudits"],"fullName":" AuditManager getProviderAudits should return empty array for provider with no audits","status":"passed","title":"should return empty array for provider with no audits","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","validateAuditCriteria"],"fullName":" AuditManager validateAuditCriteria should validate provider against audit criteria","status":"failed","title":"should validate provider against audit criteria","duration":0,"failureMessages":["auditManager.validateAuditCriteria is not a function"],"location":{"line":179,"column":41}},{"ancestorTitles":["","AuditManager","validateAuditCriteria"],"fullName":" AuditManager validateAuditCriteria should reject provider not meeting criteria","status":"failed","title":"should reject provider not meeting criteria","duration":1,"failureMessages":["auditManager.validateAuditCriteria is not a function"],"location":{"line":221,"column":41}},{"ancestorTitles":["","AuditManager","getAuditHistory"],"fullName":" AuditManager getAuditHistory should get audit history for owner","status":"failed","title":"should get audit history for owner","duration":1,"failureMessages":["Owner and auditor are required"],"location":{"line":189,"column":13}},{"ancestorTitles":["","AuditManager","searchAuditedProviders"],"fullName":" AuditManager searchAuditedProviders should search providers by audit criteria","status":"failed","title":"should search providers by audit criteria","duration":1,"failureMessages":["auditManager.searchAuditedProviders is not a function"],"location":{"line":300,"column":41}},{"ancestorTitles":["","AuditManager","searchAuditedProviders"],"fullName":" AuditManager searchAuditedProviders should return empty results for criteria with no matches","status":"failed","title":"should return empty results for criteria with no matches","duration":1,"failureMessages":["auditManager.searchAuditedProviders is not a function"],"location":{"line":329,"column":41}},{"ancestorTitles":["","AuditManager","getAuditStats"],"fullName":" AuditManager getAuditStats should get audit statistics","status":"failed","title":"should get audit statistics","duration":0,"failureMessages":["auditManager.getAuditStats is not a function"],"location":{"line":344,"column":41}}],"startTime":1752508564897,"endTime":1752508564917,"status":"failed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/audit.test.ts"},{"assertionResults":[{"ancestorTitles":["","CertificateManager","create"],"fullName":" CertificateManager create should create certificate successfully","status":"failed","title":"should create certificate successfully","duration":7,"failureMessages":["expected 'cert-1752508564910' to match object { certificateId: { …(2) }, …(3) }"],"location":{"line":41,"column":22}},{"ancestorTitles":["","CertificateManager","create"],"fullName":" CertificateManager create should throw error for invalid certificate data","status":"failed","title":"should throw error for invalid certificate data","duration":2,"failureMessages":["expected [Function] to throw error including 'Invalid certificate parameters' but got 'Owner, certificate, and public key ar…'"]},{"ancestorTitles":["","CertificateManager","revoke"],"fullName":" CertificateManager revoke should revoke certificate successfully","status":"passed","title":"should revoke certificate successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","list"],"fullName":" CertificateManager list should list certificates for owner","status":"failed","title":"should list certificates for owner","duration":1,"failureMessages":["expected { certificateId: { …(2) }, …(3) } to match object { certificateId: { …(2) }, …(1) }\n(8 matching properties omitted from actual)"],"location":{"line":104,"column":25}},{"ancestorTitles":["","CertificateManager","list"],"fullName":" CertificateManager list should return empty array when no certificates found","status":"passed","title":"should return empty array when no certificates found","duration":0,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","generateKeyPair"],"fullName":" CertificateManager generateKeyPair should generate valid key pair","status":"failed","title":"should generate valid key pair","duration":1,"failureMessages":["expected 'object' to be 'string' // Object.is equality"],"location":{"line":129,"column":35}},{"ancestorTitles":["","CertificateManager","validateCertificate"],"fullName":" CertificateManager validateCertificate should validate valid certificate","status":"failed","title":"should validate valid certificate","duration":0,"failureMessages":["expected undefined to be true // Object.is equality"],"location":{"line":141,"column":28}},{"ancestorTitles":["","CertificateManager","validateCertificate"],"fullName":" CertificateManager validateCertificate should reject invalid certificate format","status":"failed","title":"should reject invalid certificate format","duration":0,"failureMessages":["expected undefined to be false // Object.is equality"],"location":{"line":150,"column":28}},{"ancestorTitles":["","CertificateManager","validateCertificate"],"fullName":" CertificateManager validateCertificate should reject empty certificate","status":"failed","title":"should reject empty certificate","duration":1,"failureMessages":["expected undefined to be false // Object.is equality"],"location":{"line":157,"column":28}}],"startTime":1752508564909,"endTime":1752508564922,"status":"failed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/certificates.test.ts"},{"assertionResults":[],"startTime":1752508564270,"endTime":1752508564270,"status":"failed","message":"Transform failed with 1 error:\n/home/andrew/akashjs/packages/core/src/modules/deployments.ts:233:9: ERROR: Multiple exports with the same name \"DeploymentManager\"","name":"/home/andrew/akashjs/packages/core/src/modules/deployments.test.ts"},{"assertionResults":[{"ancestorTitles":["","EscrowManager","createAccount"],"fullName":" EscrowManager createAccount should create escrow account successfully","status":"failed","title":"should create escrow account successfully","duration":4,"failureMessages":["Account scope, xid, and depositor are required"],"location":{"line":29,"column":13}},{"ancestorTitles":["","EscrowManager","createAccount"],"fullName":" EscrowManager createAccount should throw error for invalid account parameters","status":"failed","title":"should throw error for invalid account parameters","duration":4,"failureMessages":["expected [Function] to throw error including 'Invalid account parameters' but got 'Account scope, xid, and depositor are…'"]},{"ancestorTitles":["","EscrowManager","deposit"],"fullName":" EscrowManager deposit should deposit funds successfully","status":"failed","title":"should deposit funds successfully","duration":0,"failureMessages":["escrowManager.deposit is not a function"],"location":{"line":80,"column":27}},{"ancestorTitles":["","EscrowManager","getAccount"],"fullName":" EscrowManager getAccount should get escrow account details","status":"failed","title":"should get escrow account details","duration":3,"failureMessages":["expected { …(8) } to match object { …(5) }\n(5 matching properties omitted from actual)"],"location":{"line":107,"column":22}},{"ancestorTitles":["","EscrowManager","getAccount"],"fullName":" EscrowManager getAccount should return null for non-existent account","status":"passed","title":"should return null for non-existent account","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","getBalance"],"fullName":" EscrowManager getBalance should get account balance","status":"passed","title":"should get account balance","duration":0,"failureMessages":[]}],"startTime":1752508564909,"endTime":1752508564920,"status":"failed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/escrow.test.ts"},{"assertionResults":[{"ancestorTitles":["","GovernanceManager","submitProposal"],"fullName":" GovernanceManager submitProposal should submit proposal successfully","status":"failed","title":"should submit proposal successfully","duration":6,"failureMessages":["expected 'prop-1752508564911' to be '12345' // Object.is equality"],"location":{"line":42,"column":22}},{"ancestorTitles":["","GovernanceManager","submitProposal"],"fullName":" GovernanceManager submitProposal should throw error for invalid proposal parameters","status":"failed","title":"should throw error for invalid proposal parameters","duration":1,"failureMessages":["expected [Function] to throw error including 'Invalid proposal parameters' but got 'Title, description, and proposer are …'"]},{"ancestorTitles":["","GovernanceManager","vote"],"fullName":" GovernanceManager vote should vote on proposal successfully","status":"passed","title":"should vote on proposal successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","vote"],"fullName":" GovernanceManager vote should throw error for invalid vote option","status":"passed","title":"should throw error for invalid vote option","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getProposal"],"fullName":" GovernanceManager getProposal should get proposal by ID","status":"failed","title":"should get proposal by ID","duration":3,"failureMessages":["expected { proposalId: '123', …(8) } to match object { proposalId: '123', …(6) }\n(11 matching properties omitted from actual)"],"location":{"line":108,"column":22}},{"ancestorTitles":["","GovernanceManager","getProposal"],"fullName":" GovernanceManager getProposal should return null for non-existent proposal","status":"passed","title":"should return null for non-existent proposal","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getVotes"],"fullName":" GovernanceManager getVotes should get votes for proposal","status":"failed","title":"should get votes for proposal","duration":0,"failureMessages":["governanceManager.getVotes is not a function"],"location":{"line":143,"column":46}},{"ancestorTitles":["","GovernanceManager","getTallyResult"],"fullName":" GovernanceManager getTallyResult should get tally result for proposal","status":"failed","title":"should get tally result for proposal","duration":0,"failureMessages":["expected { yes: '1000000', …(3) } to match object { yes: '1000000', …(3) }"],"location":{"line":167,"column":22}},{"ancestorTitles":["","GovernanceManager","getParams"],"fullName":" GovernanceManager getParams should get governance parameters","status":"failed","title":"should get governance parameters","duration":2,"failureMessages":["expected { votingParams: { …(1) }, …(2) } to match object { votingParams: { …(1) }, …(2) }"],"location":{"line":180,"column":22}}],"startTime":1752508564910,"endTime":1752508564924,"status":"failed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/governance.test.ts"},{"assertionResults":[{"ancestorTitles":["","MarketManager","listOrders"],"fullName":" MarketManager listOrders should list orders with default filters","status":"failed","title":"should list orders with default filters","duration":9,"failureMessages":["expected { orderId: { …(4) }, state: 1, …(2) } to match object { orderId: { …(4) }, …(2) }\n(4 matching properties omitted from actual)"],"location":{"line":38,"column":25}},{"ancestorTitles":["","MarketManager","listOrders"],"fullName":" MarketManager listOrders should list orders with custom filters","status":"passed","title":"should list orders with custom filters","duration":1,"failureMessages":[]},{"ancestorTitles":["","MarketManager","createBid"],"fullName":" MarketManager createBid should create bid successfully","status":"failed","title":"should create bid successfully","duration":1,"failureMessages":["expected 'bid-1752508564929' to match object { Object (bidId, state, ...) }"],"location":{"line":87,"column":22}},{"ancestorTitles":["","MarketManager","listLeases"],"fullName":" MarketManager listLeases should list leases for owner","status":"failed","title":"should list leases for owner","duration":1,"failureMessages":["Failed to list leases"],"location":{"line":374,"column":13}},{"ancestorTitles":["","MarketManager","getMarketStats"],"fullName":" MarketManager getMarketStats should return market statistics","status":"failed","title":"should return market statistics","duration":1,"failureMessages":["expected { totalOrders: 1250, …(6) } to match object { totalOrders: 2, …(3) }\n(3 matching properties omitted from actual)"],"location":{"line":138,"column":22}}],"startTime":1752508564919,"endTime":1752508564932,"status":"failed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/market.test.ts"},{"assertionResults":[{"ancestorTitles":["","ProviderManager","createProvider"],"fullName":" ProviderManager createProvider should create provider successfully","status":"passed","title":"should create provider successfully","duration":2,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","createProvider"],"fullName":" ProviderManager createProvider should throw error for invalid provider parameters","status":"failed","title":"should throw error for invalid provider parameters","duration":6,"failureMessages":["expected [Function] to throw error including 'Invalid provider parameters' but got 'Owner and host URI are required'"]},{"ancestorTitles":["","ProviderManager","getProvider"],"fullName":" ProviderManager getProvider should get provider by owner","status":"failed","title":"should get provider by owner","duration":9,"failureMessages":["expected { owner: 'akash1provider', …(3) } to match object { owner: 'akash1provider', …(2) }\n(3 matching properties omitted from actual)"],"location":{"line":80,"column":22}},{"ancestorTitles":["","ProviderManager","getProvider"],"fullName":" ProviderManager getProvider should return null for non-existent provider","status":"passed","title":"should return null for non-existent provider","duration":0,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","listProviders"],"fullName":" ProviderManager listProviders should list all providers","status":"failed","title":"should list all providers","duration":3,"failureMessages":["expected { owner: 'akash1provider0', …(3) } to match object { owner: 'akash1mock', …(2) }\n(3 matching properties omitted from actual)"],"location":{"line":116,"column":25}},{"ancestorTitles":["","ProviderManager","getProviderStatus"],"fullName":" ProviderManager getProviderStatus should get provider status","status":"failed","title":"should get provider status","duration":1,"failureMessages":["expected { online: true, …(5) } to match object { owner: 'akash1provider', …(4) }\n(11 matching properties omitted from actual)"],"location":{"line":143,"column":22}},{"ancestorTitles":["","ProviderManager","getProviderCapacity"],"fullName":" ProviderManager getProviderCapacity should get provider capacity information","status":"failed","title":"should get provider capacity information","duration":6,"failureMessages":["expected { Object (total, allocated, ...) } to match object { total: { …(3) }, …(2) }\n(6 matching properties omitted from actual)"],"location":{"line":159,"column":22}},{"ancestorTitles":["","ProviderManager","validateProviderConfig"],"fullName":" ProviderManager validateProviderConfig should validate valid provider configuration","status":"failed","title":"should validate valid provider configuration","duration":0,"failureMessages":["providerManager.validateProviderConfig is not a function"],"location":{"line":192,"column":38}},{"ancestorTitles":["","ProviderManager","validateProviderConfig"],"fullName":" ProviderManager validateProviderConfig should reject invalid provider configuration","status":"failed","title":"should reject invalid provider configuration","duration":1,"failureMessages":["providerManager.validateProviderConfig is not a function"],"location":{"line":206,"column":38}}],"startTime":1752508564895,"endTime":1752508564923,"status":"failed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/provider.test.ts"},{"assertionResults":[{"ancestorTitles":["","SDLManager","parseSDL"],"fullName":" SDLManager parseSDL should parse valid SDL YAML","status":"failed","title":"should parse valid SDL YAML","duration":4,"failureMessages":["Failed to parse SDL: SDL parsing requires YAML support - please provide JSON format"],"location":{"line":43,"column":13}},{"ancestorTitles":["","SDLManager","parseSDL"],"fullName":" SDLManager parseSDL should throw error for invalid SDL syntax","status":"failed","title":"should throw error for invalid SDL syntax","duration":3,"failureMessages":["expected [Function] to throw error including 'Invalid SDL syntax' but got 'Failed to parse SDL: SDL parsing requ…'"],"location":{"line":96,"column":53}},{"ancestorTitles":["","SDLManager","parseSDL"],"fullName":" SDLManager parseSDL should throw error for missing required fields","status":"failed","title":"should throw error for missing required fields","duration":1,"failureMessages":["expected [Function] to throw error including 'Missing required SDL fields' but got 'Failed to parse SDL: SDL parsing requ…'"],"location":{"line":107,"column":56}},{"ancestorTitles":["","SDLManager","validateSDL"],"fullName":" SDLManager validateSDL should validate correct SDL structure","status":"passed","title":"should validate correct SDL structure","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","validateSDL"],"fullName":" SDLManager validateSDL should reject SDL with invalid resource specifications","status":"failed","title":"should reject SDL with invalid resource specifications","duration":1,"failureMessages":["expected [ …(2) ] to include 'Invalid CPU units: must be positive'"],"location":{"line":179,"column":29}},{"ancestorTitles":["","SDLManager","generateManifest"],"fullName":" SDLManager generateManifest should generate deployment manifest from SDL","status":"failed","title":"should generate deployment manifest from SDL","duration":1,"failureMessages":["sdlManager.generateManifest is not a function"],"location":{"line":225,"column":35}},{"ancestorTitles":["","SDLManager","estimateResourceCosts"],"fullName":" SDLManager estimateResourceCosts should estimate costs for SDL resources","status":"failed","title":"should estimate costs for SDL resources","duration":1,"failureMessages":["sdlManager.estimateResourceCosts is not a function"],"location":{"line":285,"column":35}},{"ancestorTitles":["","SDLManager","convertToV2"],"fullName":" SDLManager convertToV2 should convert SDL v1 to v2 format","status":"failed","title":"should convert SDL v1 to v2 format","duration":0,"failureMessages":["sdlManager.convertToV2 is not a function"],"location":{"line":332,"column":33}},{"ancestorTitles":["","SDLManager","optimizeSDL"],"fullName":" SDLManager optimizeSDL should optimize SDL for cost and performance","status":"failed","title":"should optimize SDL for cost and performance","duration":1,"failureMessages":["sdlManager.optimizeSDL is not a function"],"location":{"line":380,"column":36}}],"startTime":1752508564895,"endTime":1752508564908,"status":"failed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/sdl.test.ts"},{"assertionResults":[{"ancestorTitles":["","WalletManager","getBalance"],"fullName":" WalletManager getBalance should get wallet balance successfully","status":"failed","title":"should get wallet balance successfully","duration":11,"failureMessages":["expected { address: 'akash1test', …(1) } to deeply equal { denom: 'uakt', amount: '1000000' }"],"location":{"line":36,"column":22}},{"ancestorTitles":["","WalletManager","getBalance"],"fullName":" WalletManager getBalance should handle balance query for non-existent address","status":"failed","title":"should handle balance query for non-existent address","duration":2,"failureMessages":["expected { address: 'akash1nonexistent', …(1) } to deeply equal { denom: 'uakt', amount: '0' }"],"location":{"line":50,"column":22}},{"ancestorTitles":["","WalletManager","getTransactionHistory"],"fullName":" WalletManager getTransactionHistory should get transaction history for address","status":"failed","title":"should get transaction history for address","duration":3,"failureMessages":["Failed to get transaction history"],"location":{"line":191,"column":13}},{"ancestorTitles":["","WalletManager","getTransactionHistory"],"fullName":" WalletManager getTransactionHistory should return empty array for address with no transactions","status":"passed","title":"should return empty array for address with no transactions","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","send"],"fullName":" WalletManager send should send tokens successfully","status":"failed","title":"should send tokens successfully","duration":1,"failureMessages":["walletManager.send is not a function"],"location":{"line":128,"column":42}},{"ancestorTitles":["","WalletManager","send"],"fullName":" WalletManager send should throw error for insufficient balance","status":"failed","title":"should throw error for insufficient balance","duration":0,"failureMessages":["walletManager.send is not a function"],"location":{"line":151,"column":34}},{"ancestorTitles":["","WalletManager","send"],"fullName":" WalletManager send should throw error for invalid address format","status":"failed","title":"should throw error for invalid address format","duration":1,"failureMessages":["walletManager.send is not a function"],"location":{"line":162,"column":34}},{"ancestorTitles":["","WalletManager","estimateGas"],"fullName":" WalletManager estimateGas should estimate gas for transaction","status":"failed","title":"should estimate gas for transaction","duration":1,"failureMessages":["walletManager.estimateGas is not a function"],"location":{"line":180,"column":42}},{"ancestorTitles":["","WalletManager","delegate"],"fullName":" WalletManager delegate should delegate tokens to validator","status":"failed","title":"should delegate tokens to validator","duration":0,"failureMessages":["No wallet connected"],"location":{"line":117,"column":13}},{"ancestorTitles":["","WalletManager","undelegate"],"fullName":" WalletManager undelegate should undelegate tokens from validator","status":"failed","title":"should undelegate tokens from validator","duration":1,"failureMessages":["No wallet connected"],"location":{"line":117,"column":13}},{"ancestorTitles":["","WalletManager","getDelegations"],"fullName":" WalletManager getDelegations should get delegations for address","status":"failed","title":"should get delegations for address","duration":0,"failureMessages":["walletManager.getDelegations is not a function"],"location":{"line":261,"column":42}},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should validate correct Akash address","status":"failed","title":"should validate correct Akash address","duration":1,"failureMessages":["walletManager.validateAddress is not a function"],"location":{"line":276,"column":36}},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should validate correct validator address","status":"failed","title":"should validate correct validator address","duration":0,"failureMessages":["walletManager.validateAddress is not a function"],"location":{"line":285,"column":36}},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should reject invalid address format","status":"failed","title":"should reject invalid address format","duration":0,"failureMessages":["walletManager.validateAddress is not a function"],"location":{"line":294,"column":36}},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should reject address with wrong prefix","status":"failed","title":"should reject address with wrong prefix","duration":1,"failureMessages":["walletManager.validateAddress is not a function"],"location":{"line":303,"column":36}}],"startTime":1752508564897,"endTime":1752508564920,"status":"failed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/wallet.test.ts"},{"assertionResults":[{"ancestorTitles":["","AkashProvider","connect"],"fullName":" AkashProvider connect should connect successfully","status":"passed","title":"should connect successfully","duration":3,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","connect"],"fullName":" AkashProvider connect should throw NetworkError on connection failure","status":"passed","title":"should throw NetworkError on connection failure","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","getDeployments"],"fullName":" AkashProvider getDeployments should throw error when not connected","status":"passed","title":"should throw error when not connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","getDeployments"],"fullName":" AkashProvider getDeployments should return deployments when connected","status":"passed","title":"should return deployments when connected","duration":2,"failureMessages":[]}],"startTime":1752508564901,"endTime":1752508564908,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/providers/akash.test.ts"},{"assertionResults":[{"ancestorTitles":["","Utils","validateConfig"],"fullName":" Utils validateConfig should validate valid config","status":"passed","title":"should validate valid config","duration":2,"failureMessages":[]},{"ancestorTitles":["","Utils","validateConfig"],"fullName":" Utils validateConfig should throw for missing rpcEndpoint","status":"passed","title":"should throw for missing rpcEndpoint","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","validateConfig"],"fullName":" Utils validateConfig should throw for invalid rpcEndpoint URL","status":"passed","title":"should throw for invalid rpcEndpoint URL","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","validateConfig"],"fullName":" Utils validateConfig should throw for missing chainId","status":"passed","title":"should throw for missing chainId","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","formatAKT"],"fullName":" Utils formatAKT should format AKT correctly from string","status":"passed","title":"should format AKT correctly from string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","formatAKT"],"fullName":" Utils formatAKT should format AKT correctly from number","status":"passed","title":"should format AKT correctly from number","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","formatAKT"],"fullName":" Utils formatAKT should handle custom decimals","status":"passed","title":"should handle custom decimals","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","parseAKT"],"fullName":" Utils parseAKT should parse AKT correctly","status":"passed","title":"should parse AKT correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","parseAKT"],"fullName":" Utils parseAKT should handle custom decimals","status":"passed","title":"should handle custom decimals","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","sleep"],"fullName":" Utils sleep should resolve after specified time","status":"passed","title":"should resolve after specified time","duration":11,"failureMessages":[]},{"ancestorTitles":["","Utils","retry"],"fullName":" Utils retry should succeed on first try","status":"passed","title":"should succeed on first try","duration":1,"failureMessages":[]},{"ancestorTitles":["","Utils","retry"],"fullName":" Utils retry should retry on failure and eventually succeed","status":"passed","title":"should retry on failure and eventually succeed","duration":11,"failureMessages":[]},{"ancestorTitles":["","Utils","retry"],"fullName":" Utils retry should throw after max retries","status":"passed","title":"should throw after max retries","duration":34,"failureMessages":[]}],"startTime":1752508564896,"endTime":1752508564957,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/utils/index.test.ts"}]}
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
