{"numTotalTestSuites":159,"numPassedTestSuites":159,"numFailedTestSuites":0,"numPendingTestSuites":0,"numTotalTests":314,"numPassedTests":313,"numFailedTests":1,"numPendingTests":0,"numTodoTests":0,"startTime":1752638665396,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["","AkashSDK","constructor"],"fullName":" AkashSDK constructor should create SDK with valid config","status":"passed","title":"should create SDK with valid config","duration":2,"failureMessages":[]},{"ancestorTitles":["","AkashSDK","constructor"],"fullName":" AkashSDK constructor should throw ValidationError with invalid config","status":"passed","title":"should throw ValidationError with invalid config","duration":0,"failureMessages":[]},{"ancestorTitles":["","AkashSDK","methods"],"fullName":" AkashSDK methods should have deployments methods","status":"passed","title":"should have deployments methods","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashSDK","methods"],"fullName":" AkashSDK methods should have leases methods","status":"passed","title":"should have leases methods","duration":0,"failureMessages":[]},{"ancestorTitles":["","AkashSDK","methods"],"fullName":" AkashSDK methods should have providers methods","status":"passed","title":"should have providers methods","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashSDK","methods"],"fullName":" AkashSDK methods should connect and disconnect","status":"passed","title":"should connect and disconnect","duration":0,"failureMessages":[]}],"startTime":1752638666576,"endTime":1752638666580,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/index.test.ts"},{"assertionResults":[{"ancestorTitles":["","Error classes","AkashSDKError"],"fullName":" Error classes AkashSDKError should create error with message and code","status":"passed","title":"should create error with message and code","duration":1,"failureMessages":[]},{"ancestorTitles":["","Error classes","AkashSDKError"],"fullName":" Error classes AkashSDKError should create error with details","status":"passed","title":"should create error with details","duration":1,"failureMessages":[]},{"ancestorTitles":["","Error classes","ValidationError"],"fullName":" Error classes ValidationError should create validation error","status":"passed","title":"should create validation error","duration":0,"failureMessages":[]},{"ancestorTitles":["","Error classes","ValidationError"],"fullName":" Error classes ValidationError should create validation error with details","status":"passed","title":"should create validation error with details","duration":0,"failureMessages":[]},{"ancestorTitles":["","Error classes","NetworkError"],"fullName":" Error classes NetworkError should create network error","status":"passed","title":"should create network error","duration":1,"failureMessages":[]},{"ancestorTitles":["","Error classes","NetworkError"],"fullName":" Error classes NetworkError should create network error with details","status":"passed","title":"should create network error with details","duration":0,"failureMessages":[]},{"ancestorTitles":["","Error classes","ProviderError"],"fullName":" Error classes ProviderError should create provider error","status":"passed","title":"should create provider error","duration":0,"failureMessages":[]},{"ancestorTitles":["","Error classes","ProviderError"],"fullName":" Error classes ProviderError should create provider error with details","status":"passed","title":"should create provider error with details","duration":1,"failureMessages":[]},{"ancestorTitles":["","Error classes","DeploymentError"],"fullName":" Error classes DeploymentError should create deployment error","status":"passed","title":"should create deployment error","duration":0,"failureMessages":[]},{"ancestorTitles":["","Error classes","DeploymentError"],"fullName":" Error classes DeploymentError should create deployment error with details","status":"passed","title":"should create deployment error with details","duration":0,"failureMessages":[]}],"startTime":1752638666157,"endTime":1752638666162,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/errors/index.test.ts"},{"assertionResults":[{"ancestorTitles":["","AkashProvider","connect"],"fullName":" AkashProvider connect should connect successfully","status":"passed","title":"should connect successfully","duration":4,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","connect"],"fullName":" AkashProvider connect should throw NetworkError on connection failure","status":"passed","title":"should throw NetworkError on connection failure","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","disconnect"],"fullName":" AkashProvider disconnect should disconnect when connected","status":"passed","title":"should disconnect when connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","disconnect"],"fullName":" AkashProvider disconnect should handle disconnect when not connected","status":"passed","title":"should handle disconnect when not connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","getDeployments"],"fullName":" AkashProvider getDeployments should throw error when not connected","status":"passed","title":"should throw error when not connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","getDeployments"],"fullName":" AkashProvider getDeployments should return deployments when connected","status":"passed","title":"should return deployments when connected","duration":3,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","getDeployments"],"fullName":" AkashProvider getDeployments should handle searchTx errors","status":"passed","title":"should handle searchTx errors","duration":3,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","getLeases"],"fullName":" AkashProvider getLeases should return leases when connected","status":"passed","title":"should return leases when connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","getLeases"],"fullName":" AkashProvider getLeases should handle searchTx errors for leases","status":"passed","title":"should handle searchTx errors for leases","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","getProviders"],"fullName":" AkashProvider getProviders should return providers when connected","status":"passed","title":"should return providers when connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","getProviders"],"fullName":" AkashProvider getProviders should handle searchTx errors for providers","status":"passed","title":"should handle searchTx errors for providers","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","createDeployment"],"fullName":" AkashProvider createDeployment should create deployment when connected","status":"passed","title":"should create deployment when connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","createDeployment"],"fullName":" AkashProvider createDeployment should throw error when not connected","status":"passed","title":"should throw error when not connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","createDeployment"],"fullName":" AkashProvider createDeployment should handle deployment creation errors","status":"passed","title":"should handle deployment creation errors","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","closeDeployment"],"fullName":" AkashProvider closeDeployment should close deployment when connected","status":"passed","title":"should close deployment when connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","closeDeployment"],"fullName":" AkashProvider closeDeployment should throw error when not connected","status":"passed","title":"should throw error when not connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","AkashProvider","closeDeployment"],"fullName":" AkashProvider closeDeployment should handle deployment closing errors","status":"passed","title":"should handle deployment closing errors","duration":1,"failureMessages":[]}],"startTime":1752638666172,"endTime":1752638666192,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/providers/akash.test.ts"},{"assertionResults":[{"ancestorTitles":["","AuditManager","createAuditRequest"],"fullName":" AuditManager createAuditRequest should create audit request successfully","status":"passed","title":"should create audit request successfully","duration":2,"failureMessages":[]},{"ancestorTitles":["","AuditManager","createAuditRequest"],"fullName":" AuditManager createAuditRequest should throw error for invalid audit parameters","status":"passed","title":"should throw error for invalid audit parameters","duration":2,"failureMessages":[]},{"ancestorTitles":["","AuditManager","createAuditRequest"],"fullName":" AuditManager createAuditRequest should handle network errors","status":"passed","title":"should handle network errors","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getAuditors"],"fullName":" AuditManager getAuditors should list all available auditors","status":"passed","title":"should list all available auditors","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getAuditors"],"fullName":" AuditManager getAuditors should handle network errors","status":"passed","title":"should handle network errors","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getProviderAudits"],"fullName":" AuditManager getProviderAudits should get audit records for provider","status":"passed","title":"should get audit records for provider","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getProviderAudits"],"fullName":" AuditManager getProviderAudits should return empty array for provider with no audits","status":"passed","title":"should return empty array for provider with no audits","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getProviderAudits"],"fullName":" AuditManager getProviderAudits should throw error for missing provider","status":"passed","title":"should throw error for missing provider","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getProviderAudits"],"fullName":" AuditManager getProviderAudits should handle network errors","status":"passed","title":"should handle network errors","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","revokeAudit"],"fullName":" AuditManager revokeAudit should revoke audit successfully","status":"passed","title":"should revoke audit successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","revokeAudit"],"fullName":" AuditManager revokeAudit should throw error for missing parameters","status":"passed","title":"should throw error for missing parameters","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","revokeAudit"],"fullName":" AuditManager revokeAudit should handle network errors","status":"passed","title":"should handle network errors","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","validateAuditCriteria"],"fullName":" AuditManager validateAuditCriteria should validate provider against audit criteria","status":"passed","title":"should validate provider against audit criteria","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","validateAuditCriteria"],"fullName":" AuditManager validateAuditCriteria should handle network errors","status":"passed","title":"should handle network errors","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getAuditHistory"],"fullName":" AuditManager getAuditHistory should get audit history for owner","status":"passed","title":"should get audit history for owner","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getAuditHistory"],"fullName":" AuditManager getAuditHistory should throw error for missing owner","status":"passed","title":"should throw error for missing owner","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getAuditHistory"],"fullName":" AuditManager getAuditHistory should handle network errors","status":"passed","title":"should handle network errors","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","listAllAudits"],"fullName":" AuditManager listAllAudits should list all audits with no filters","status":"passed","title":"should list all audits with no filters","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","listAllAudits"],"fullName":" AuditManager listAllAudits should handle network errors","status":"passed","title":"should handle network errors","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","validateAudit"],"fullName":" AuditManager validateAudit should validate valid audit","status":"passed","title":"should validate valid audit","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","validateAudit"],"fullName":" AuditManager validateAudit should reject audit with missing data","status":"passed","title":"should reject audit with missing data","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getAuditorProviders"],"fullName":" AuditManager getAuditorProviders should get providers audited by auditor","status":"passed","title":"should get providers audited by auditor","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getAuditorProviders"],"fullName":" AuditManager getAuditorProviders should throw error for missing auditor","status":"passed","title":"should throw error for missing auditor","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getAuditorProviders"],"fullName":" AuditManager getAuditorProviders should handle network errors","status":"passed","title":"should handle network errors","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getAuditStats"],"fullName":" AuditManager getAuditStats should get audit statistics","status":"passed","title":"should get audit statistics","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","getAuditStats"],"fullName":" AuditManager getAuditStats should handle network errors","status":"passed","title":"should handle network errors","duration":0,"failureMessages":[]},{"ancestorTitles":["","AuditManager","searchAuditedProviders"],"fullName":" AuditManager searchAuditedProviders should search providers by audit criteria","status":"passed","title":"should search providers by audit criteria","duration":1,"failureMessages":[]},{"ancestorTitles":["","AuditManager","searchAuditedProviders"],"fullName":" AuditManager searchAuditedProviders should handle network errors","status":"passed","title":"should handle network errors","duration":0,"failureMessages":[]}],"startTime":1752638666156,"endTime":1752638666170,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/audit.test.ts"},{"assertionResults":[{"ancestorTitles":["","CertificateManager","create"],"fullName":" CertificateManager create should create certificate successfully","status":"passed","title":"should create certificate successfully","duration":2,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","create"],"fullName":" CertificateManager create should throw error for invalid certificate data","status":"passed","title":"should throw error for invalid certificate data","duration":2,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","revoke"],"fullName":" CertificateManager revoke should revoke certificate successfully","status":"passed","title":"should revoke certificate successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","list"],"fullName":" CertificateManager list should list certificates for owner","status":"passed","title":"should list certificates for owner","duration":1,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","list"],"fullName":" CertificateManager list should return empty array when no certificates found","status":"passed","title":"should return empty array when no certificates found","duration":0,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","get"],"fullName":" CertificateManager get should get certificate by ID successfully","status":"passed","title":"should get certificate by ID successfully","duration":2,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","get"],"fullName":" CertificateManager get should return null when certificate not found","status":"passed","title":"should return null when certificate not found","duration":0,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","get"],"fullName":" CertificateManager get should return null when no certificates exist for owner","status":"passed","title":"should return null when no certificates exist for owner","duration":0,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","get"],"fullName":" CertificateManager get should handle network errors when getting certificate","status":"passed","title":"should handle network errors when getting certificate","duration":0,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","get"],"fullName":" CertificateManager get should find certificate with matching serial from multiple certificates","status":"passed","title":"should find certificate with matching serial from multiple certificates","duration":1,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","generateKeyPair"],"fullName":" CertificateManager generateKeyPair should generate valid key pair","status":"passed","title":"should generate valid key pair","duration":0,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","validateCertificate"],"fullName":" CertificateManager validateCertificate should validate valid certificate","status":"passed","title":"should validate valid certificate","duration":0,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","validateCertificate"],"fullName":" CertificateManager validateCertificate should reject invalid certificate format","status":"passed","title":"should reject invalid certificate format","duration":1,"failureMessages":[]},{"ancestorTitles":["","CertificateManager","validateCertificate"],"fullName":" CertificateManager validateCertificate should reject empty certificate","status":"passed","title":"should reject empty certificate","duration":0,"failureMessages":[]}],"startTime":1752638666200,"endTime":1752638666210,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/certificates.test.ts"},{"assertionResults":[{"ancestorTitles":["","DeploymentManager","create"],"fullName":" DeploymentManager create should create deployment successfully","status":"passed","title":"should create deployment successfully","duration":4,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","create"],"fullName":" DeploymentManager create should throw error on deployment creation failure","status":"passed","title":"should throw error on deployment creation failure","duration":1,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","list"],"fullName":" DeploymentManager list should list deployments for owner","status":"passed","title":"should list deployments for owner","duration":1,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","list"],"fullName":" DeploymentManager list should handle empty deployment list","status":"passed","title":"should handle empty deployment list","duration":1,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","get"],"fullName":" DeploymentManager get should get specific deployment","status":"passed","title":"should get specific deployment","duration":0,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","get"],"fullName":" DeploymentManager get should return null for non-existent deployment","status":"passed","title":"should return null for non-existent deployment","duration":0,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","close"],"fullName":" DeploymentManager close should close deployment successfully","status":"passed","title":"should close deployment successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","close"],"fullName":" DeploymentManager close should throw error on close failure","status":"passed","title":"should throw error on close failure","duration":0,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","update"],"fullName":" DeploymentManager update should update deployment successfully","status":"passed","title":"should update deployment successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","update"],"fullName":" DeploymentManager update should throw error for invalid deployment ID","status":"passed","title":"should throw error for invalid deployment ID","duration":0,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","update"],"fullName":" DeploymentManager update should handle update errors","status":"passed","title":"should handle update errors","duration":1,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","getGroups"],"fullName":" DeploymentManager getGroups should get deployment groups successfully","status":"passed","title":"should get deployment groups successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","getGroups"],"fullName":" DeploymentManager getGroups should throw error for invalid deployment ID in getGroups","status":"passed","title":"should throw error for invalid deployment ID in getGroups","duration":0,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","getGroups"],"fullName":" DeploymentManager getGroups should handle getGroups errors","status":"passed","title":"should handle getGroups errors","duration":0,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","validateDeployment"],"fullName":" DeploymentManager validateDeployment should validate active deployment successfully","status":"passed","title":"should validate active deployment successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","validateDeployment"],"fullName":" DeploymentManager validateDeployment should return invalid for non-existent deployment","status":"passed","title":"should return invalid for non-existent deployment","duration":0,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","validateDeployment"],"fullName":" DeploymentManager validateDeployment should return invalid for inactive deployment","status":"passed","title":"should return invalid for inactive deployment","duration":0,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","validateDeployment"],"fullName":" DeploymentManager validateDeployment should handle validation errors gracefully","status":"passed","title":"should handle validation errors gracefully","duration":0,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","validateDeployment"],"fullName":" DeploymentManager validateDeployment should validate deployment with multiple validation checks","status":"passed","title":"should validate deployment with multiple validation checks","duration":1,"failureMessages":[]},{"ancestorTitles":["","DeploymentManager","validateDeployment"],"fullName":" DeploymentManager validateDeployment should handle deployment state validation edge cases","status":"passed","title":"should handle deployment state validation edge cases","duration":0,"failureMessages":[]}],"startTime":1752638666200,"endTime":1752638666213,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/deployments.test.ts"},{"assertionResults":[{"ancestorTitles":["","EscrowManager","createAccount"],"fullName":" EscrowManager createAccount should create escrow account successfully","status":"passed","title":"should create escrow account successfully","duration":2,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","createAccount"],"fullName":" EscrowManager createAccount should throw error for invalid account parameters","status":"passed","title":"should throw error for invalid account parameters","duration":1,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","deposit"],"fullName":" EscrowManager deposit should deposit funds successfully","status":"passed","title":"should deposit funds successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","getAccount"],"fullName":" EscrowManager getAccount should get escrow account details","status":"passed","title":"should get escrow account details","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","getAccount"],"fullName":" EscrowManager getAccount should return null for non-existent account","status":"passed","title":"should return null for non-existent account","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","getBalance"],"fullName":" EscrowManager getBalance should get account balance","status":"passed","title":"should get account balance","duration":1,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","getBalance"],"fullName":" EscrowManager getBalance should throw error for non-existent account","status":"passed","title":"should throw error for non-existent account","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","withdrawFunds"],"fullName":" EscrowManager withdrawFunds should withdraw funds successfully","status":"passed","title":"should withdraw funds successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","withdrawFunds"],"fullName":" EscrowManager withdrawFunds should throw validation error for missing account scope","status":"passed","title":"should throw validation error for missing account scope","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","withdrawFunds"],"fullName":" EscrowManager withdrawFunds should throw validation error for missing amount","status":"passed","title":"should throw validation error for missing amount","duration":1,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","withdrawFunds"],"fullName":" EscrowManager withdrawFunds should throw validation error for negative amount","status":"passed","title":"should throw validation error for negative amount","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","withdrawFunds"],"fullName":" EscrowManager withdrawFunds should throw validation error for zero amount","status":"passed","title":"should throw validation error for zero amount","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","withdrawFunds"],"fullName":" EscrowManager withdrawFunds should throw network error when transaction fails","status":"passed","title":"should throw network error when transaction fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","listAccounts"],"fullName":" EscrowManager listAccounts should list all accounts without filters","status":"passed","title":"should list all accounts without filters","duration":1,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","listAccounts"],"fullName":" EscrowManager listAccounts should list accounts with owner filter","status":"passed","title":"should list accounts with owner filter","duration":1,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","listAccounts"],"fullName":" EscrowManager listAccounts should list accounts with scope filter","status":"passed","title":"should list accounts with scope filter","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","listAccounts"],"fullName":" EscrowManager listAccounts should list accounts with state filter","status":"passed","title":"should list accounts with state filter","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","listAccounts"],"fullName":" EscrowManager listAccounts should list accounts with multiple filters","status":"failed","title":"should list accounts with multiple filters","duration":8,"failureMessages":["expected { id: { …(2) }, …(7) } to match object { owner: 'akash1multiowner', …(2) }\n(11 matching properties omitted from actual)"],"location":{"line":441,"column":25}},{"ancestorTitles":["","EscrowManager","listAccounts"],"fullName":" EscrowManager listAccounts should return empty array when no accounts found","status":"passed","title":"should return empty array when no accounts found","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","listAccounts"],"fullName":" EscrowManager listAccounts should throw network error when transaction search fails","status":"passed","title":"should throw network error when transaction search fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","closeAccount"],"fullName":" EscrowManager closeAccount should close account successfully","status":"passed","title":"should close account successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","closeAccount"],"fullName":" EscrowManager closeAccount should throw validation error for missing scope","status":"passed","title":"should throw validation error for missing scope","duration":1,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","closeAccount"],"fullName":" EscrowManager closeAccount should throw validation error for missing xid","status":"passed","title":"should throw validation error for missing xid","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","closeAccount"],"fullName":" EscrowManager closeAccount should throw validation error for missing both scope and xid","status":"passed","title":"should throw validation error for missing both scope and xid","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","closeAccount"],"fullName":" EscrowManager closeAccount should throw network error when transaction fails","status":"passed","title":"should throw network error when transaction fails","duration":1,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","depositFunds validation"],"fullName":" EscrowManager depositFunds validation should throw validation error for missing depositor","status":"passed","title":"should throw validation error for missing depositor","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","depositFunds validation"],"fullName":" EscrowManager depositFunds validation should throw validation error for negative deposit amount","status":"passed","title":"should throw validation error for negative deposit amount","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","depositFunds validation"],"fullName":" EscrowManager depositFunds validation should throw network error when deposit transaction fails","status":"passed","title":"should throw network error when deposit transaction fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","createAccount network errors"],"fullName":" EscrowManager createAccount network errors should throw network error when create transaction fails","status":"passed","title":"should throw network error when create transaction fails","duration":1,"failureMessages":[]},{"ancestorTitles":["","EscrowManager","getAccount network errors"],"fullName":" EscrowManager getAccount network errors should throw network error when get transaction fails","status":"passed","title":"should throw network error when get transaction fails","duration":0,"failureMessages":[]}],"startTime":1752638666193,"endTime":1752638666214,"status":"failed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/escrow.test.ts"},{"assertionResults":[{"ancestorTitles":["","GovernanceManager","submitProposal"],"fullName":" GovernanceManager submitProposal should submit proposal successfully","status":"passed","title":"should submit proposal successfully","duration":2,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","submitProposal"],"fullName":" GovernanceManager submitProposal should throw error for invalid proposal parameters","status":"passed","title":"should throw error for invalid proposal parameters","duration":2,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","vote"],"fullName":" GovernanceManager vote should vote on proposal successfully","status":"passed","title":"should vote on proposal successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","vote"],"fullName":" GovernanceManager vote should throw error for invalid vote option","status":"passed","title":"should throw error for invalid vote option","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getProposal"],"fullName":" GovernanceManager getProposal should get proposal by ID","status":"passed","title":"should get proposal by ID","duration":2,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getProposal"],"fullName":" GovernanceManager getProposal should return null for non-existent proposal","status":"passed","title":"should return null for non-existent proposal","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","deposit"],"fullName":" GovernanceManager deposit should deposit to proposal successfully","status":"passed","title":"should deposit to proposal successfully","duration":2,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","deposit"],"fullName":" GovernanceManager deposit should throw error for missing proposal ID","status":"passed","title":"should throw error for missing proposal ID","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","deposit"],"fullName":" GovernanceManager deposit should throw error for missing depositor","status":"passed","title":"should throw error for missing depositor","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","deposit"],"fullName":" GovernanceManager deposit should throw error for empty amount array","status":"passed","title":"should throw error for empty amount array","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","deposit"],"fullName":" GovernanceManager deposit should throw error for missing amount","status":"passed","title":"should throw error for missing amount","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","deposit"],"fullName":" GovernanceManager deposit should handle network error during deposit","status":"passed","title":"should handle network error during deposit","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","listProposals"],"fullName":" GovernanceManager listProposals should list all proposals without filters","status":"passed","title":"should list all proposals without filters","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","listProposals"],"fullName":" GovernanceManager listProposals should list proposals with voter filter","status":"passed","title":"should list proposals with voter filter","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","listProposals"],"fullName":" GovernanceManager listProposals should list proposals with depositor filter","status":"passed","title":"should list proposals with depositor filter","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","listProposals"],"fullName":" GovernanceManager listProposals should list proposals with status filter","status":"passed","title":"should list proposals with status filter","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","listProposals"],"fullName":" GovernanceManager listProposals should list proposals with multiple filters","status":"passed","title":"should list proposals with multiple filters","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","listProposals"],"fullName":" GovernanceManager listProposals should return empty array when no proposals found","status":"passed","title":"should return empty array when no proposals found","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","listProposals"],"fullName":" GovernanceManager listProposals should handle network error during list proposals","status":"passed","title":"should handle network error during list proposals","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getVote"],"fullName":" GovernanceManager getVote should get vote for proposal and voter","status":"passed","title":"should get vote for proposal and voter","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getVote"],"fullName":" GovernanceManager getVote should return null when vote not found","status":"passed","title":"should return null when vote not found","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getVote"],"fullName":" GovernanceManager getVote should throw error for missing proposal ID","status":"passed","title":"should throw error for missing proposal ID","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getVote"],"fullName":" GovernanceManager getVote should throw error for missing voter","status":"passed","title":"should throw error for missing voter","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getVote"],"fullName":" GovernanceManager getVote should throw error for missing both proposal ID and voter","status":"passed","title":"should throw error for missing both proposal ID and voter","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getVote"],"fullName":" GovernanceManager getVote should handle network error during get vote","status":"passed","title":"should handle network error during get vote","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getDeposits"],"fullName":" GovernanceManager getDeposits should get deposits for proposal","status":"passed","title":"should get deposits for proposal","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getDeposits"],"fullName":" GovernanceManager getDeposits should return empty array when no deposits found","status":"passed","title":"should return empty array when no deposits found","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getDeposits"],"fullName":" GovernanceManager getDeposits should throw error for missing proposal ID","status":"passed","title":"should throw error for missing proposal ID","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getDeposits"],"fullName":" GovernanceManager getDeposits should handle network error during get deposits","status":"passed","title":"should handle network error during get deposits","duration":1,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getDeposits"],"fullName":" GovernanceManager getDeposits should handle single deposit correctly","status":"passed","title":"should handle single deposit correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getVotes"],"fullName":" GovernanceManager getVotes should get votes for proposal","status":"passed","title":"should get votes for proposal","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getTallyResult"],"fullName":" GovernanceManager getTallyResult should get tally result for proposal","status":"passed","title":"should get tally result for proposal","duration":0,"failureMessages":[]},{"ancestorTitles":["","GovernanceManager","getParams"],"fullName":" GovernanceManager getParams should get governance parameters","status":"passed","title":"should get governance parameters","duration":1,"failureMessages":[]}],"startTime":1752638666195,"endTime":1752638666215,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/governance.test.ts"},{"assertionResults":[{"ancestorTitles":["","MarketManager","listOrders"],"fullName":" MarketManager listOrders should list orders with default filters","status":"passed","title":"should list orders with default filters","duration":3,"failureMessages":[]},{"ancestorTitles":["","MarketManager","listOrders"],"fullName":" MarketManager listOrders should list orders with custom filters","status":"passed","title":"should list orders with custom filters","duration":0,"failureMessages":[]},{"ancestorTitles":["","MarketManager","createBid"],"fullName":" MarketManager createBid should create bid successfully","status":"passed","title":"should create bid successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","MarketManager","listLeases"],"fullName":" MarketManager listLeases should list leases for owner","status":"passed","title":"should list leases for owner","duration":1,"failureMessages":[]},{"ancestorTitles":["","MarketManager","getOrder"],"fullName":" MarketManager getOrder should get specific order","status":"passed","title":"should get specific order","duration":1,"failureMessages":[]},{"ancestorTitles":["","MarketManager","getOrder"],"fullName":" MarketManager getOrder should return null for non-existent order","status":"passed","title":"should return null for non-existent order","duration":0,"failureMessages":[]},{"ancestorTitles":["","MarketManager","closeBid"],"fullName":" MarketManager closeBid should close bid successfully","status":"passed","title":"should close bid successfully","duration":2,"failureMessages":[]},{"ancestorTitles":["","MarketManager","getBid"],"fullName":" MarketManager getBid should get specific bid","status":"passed","title":"should get specific bid","duration":1,"failureMessages":[]},{"ancestorTitles":["","MarketManager","getBid"],"fullName":" MarketManager getBid should return null for non-existent bid","status":"passed","title":"should return null for non-existent bid","duration":0,"failureMessages":[]},{"ancestorTitles":["","MarketManager","listBids"],"fullName":" MarketManager listBids should list bids with filters","status":"passed","title":"should list bids with filters","duration":1,"failureMessages":[]},{"ancestorTitles":["","MarketManager","createLease"],"fullName":" MarketManager createLease should create lease from bid","status":"passed","title":"should create lease from bid","duration":1,"failureMessages":[]},{"ancestorTitles":["","MarketManager","closeLease"],"fullName":" MarketManager closeLease should close lease successfully","status":"passed","title":"should close lease successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","MarketManager","getLease"],"fullName":" MarketManager getLease should get specific lease","status":"passed","title":"should get specific lease","duration":0,"failureMessages":[]},{"ancestorTitles":["","MarketManager","getLease"],"fullName":" MarketManager getLease should return null for non-existent lease","status":"passed","title":"should return null for non-existent lease","duration":0,"failureMessages":[]},{"ancestorTitles":["","MarketManager","getMarketStats"],"fullName":" MarketManager getMarketStats should return market statistics","status":"passed","title":"should return market statistics","duration":1,"failureMessages":[]}],"startTime":1752638666193,"endTime":1752638666206,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/market.test.ts"},{"assertionResults":[{"ancestorTitles":["","ProviderManager","createProvider"],"fullName":" ProviderManager createProvider should create provider successfully","status":"passed","title":"should create provider successfully","duration":3,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","createProvider"],"fullName":" ProviderManager createProvider should throw error for invalid provider parameters","status":"passed","title":"should throw error for invalid provider parameters","duration":2,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","getProvider"],"fullName":" ProviderManager getProvider should get provider by owner","status":"passed","title":"should get provider by owner","duration":2,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","getProvider"],"fullName":" ProviderManager getProvider should return null for non-existent provider","status":"passed","title":"should return null for non-existent provider","duration":1,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","listProviders"],"fullName":" ProviderManager listProviders should list all providers","status":"passed","title":"should list all providers","duration":1,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","getProviderStatus"],"fullName":" ProviderManager getProviderStatus should get provider status","status":"passed","title":"should get provider status","duration":1,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","getProviderCapacity"],"fullName":" ProviderManager getProviderCapacity should get provider capacity information","status":"passed","title":"should get provider capacity information","duration":0,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","validateProviderConfig"],"fullName":" ProviderManager validateProviderConfig should validate valid provider configuration","status":"passed","title":"should validate valid provider configuration","duration":0,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","validateProviderConfig"],"fullName":" ProviderManager validateProviderConfig should reject invalid provider configuration","status":"passed","title":"should reject invalid provider configuration","duration":1,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","createProvider"],"fullName":" ProviderManager createProvider should create provider successfully","status":"passed","title":"should create provider successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","updateProvider"],"fullName":" ProviderManager updateProvider should update provider successfully","status":"passed","title":"should update provider successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","deleteProvider"],"fullName":" ProviderManager deleteProvider should delete provider successfully","status":"passed","title":"should delete provider successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","placeBid"],"fullName":" ProviderManager placeBid should place bid successfully","status":"passed","title":"should place bid successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","updateBidPricing"],"fullName":" ProviderManager updateBidPricing should update bid pricing successfully","status":"passed","title":"should update bid pricing successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","updateResourcePricing"],"fullName":" ProviderManager updateResourcePricing should update resource pricing successfully","status":"passed","title":"should update resource pricing successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","deployManifest"],"fullName":" ProviderManager deployManifest should deploy manifest successfully","status":"passed","title":"should deploy manifest successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","updateManifest"],"fullName":" ProviderManager updateManifest should update manifest successfully","status":"passed","title":"should update manifest successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","getManifestStatus"],"fullName":" ProviderManager getManifestStatus should get manifest status","status":"passed","title":"should get manifest status","duration":0,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","getManifestStatus"],"fullName":" ProviderManager getManifestStatus should return manifest status for any deployment","status":"passed","title":"should return manifest status for any deployment","duration":1,"failureMessages":[]},{"ancestorTitles":["","ProviderManager","closeManifest"],"fullName":" ProviderManager closeManifest should close manifest successfully","status":"passed","title":"should close manifest successfully","duration":0,"failureMessages":[]}],"startTime":1752638666159,"endTime":1752638666176,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/provider.test.ts"},{"assertionResults":[{"ancestorTitles":["","SDLManager","parseSDL"],"fullName":" SDLManager parseSDL should parse valid SDL YAML","status":"passed","title":"should parse valid SDL YAML","duration":8,"failureMessages":[]},{"ancestorTitles":["","SDLManager","parseSDL"],"fullName":" SDLManager parseSDL should throw error for invalid SDL syntax","status":"passed","title":"should throw error for invalid SDL syntax","duration":2,"failureMessages":[]},{"ancestorTitles":["","SDLManager","parseSDL"],"fullName":" SDLManager parseSDL should throw error for missing required fields","status":"passed","title":"should throw error for missing required fields","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","validateSDL"],"fullName":" SDLManager validateSDL should validate correct SDL structure","status":"passed","title":"should validate correct SDL structure","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","validateSDL"],"fullName":" SDLManager validateSDL should reject SDL with invalid resource specifications","status":"passed","title":"should reject SDL with invalid resource specifications","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","generateManifest"],"fullName":" SDLManager generateManifest should generate deployment manifest from SDL","status":"passed","title":"should generate deployment manifest from SDL","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","estimateResourceCosts"],"fullName":" SDLManager estimateResourceCosts should estimate costs for SDL resources","status":"passed","title":"should estimate costs for SDL resources","duration":0,"failureMessages":[]},{"ancestorTitles":["","SDLManager","convertToV2"],"fullName":" SDLManager convertToV2 should convert SDL v1 to v2 format","status":"passed","title":"should convert SDL v1 to v2 format","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","optimizeSDL"],"fullName":" SDLManager optimizeSDL should optimize SDL for cost and performance","status":"passed","title":"should optimize SDL for cost and performance","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","generateTemplate"],"fullName":" SDLManager generateTemplate should generate web-app template","status":"passed","title":"should generate web-app template","duration":0,"failureMessages":[]},{"ancestorTitles":["","SDLManager","generateTemplate"],"fullName":" SDLManager generateTemplate should generate api-server template","status":"passed","title":"should generate api-server template","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","generateTemplate"],"fullName":" SDLManager generateTemplate should generate database template","status":"passed","title":"should generate database template","duration":0,"failureMessages":[]},{"ancestorTitles":["","SDLManager","generateTemplate"],"fullName":" SDLManager generateTemplate should generate worker template","status":"passed","title":"should generate worker template","duration":0,"failureMessages":[]},{"ancestorTitles":["","SDLManager","calculateResources"],"fullName":" SDLManager calculateResources should calculate total resources from SDL","status":"passed","title":"should calculate total resources from SDL","duration":0,"failureMessages":[]},{"ancestorTitles":["","SDLManager","calculateResources"],"fullName":" SDLManager calculateResources should return zero values for empty SDL","status":"passed","title":"should return zero values for empty SDL","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","convertToManifest"],"fullName":" SDLManager convertToManifest should convert SDL to manifest groups","status":"passed","title":"should convert SDL to manifest groups","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","convertToManifest"],"fullName":" SDLManager convertToManifest should throw error for invalid SDL","status":"passed","title":"should throw error for invalid SDL","duration":0,"failureMessages":[]},{"ancestorTitles":["","SDLManager","Edge case coverage for remaining lines"],"fullName":" SDLManager Edge case coverage for remaining lines should handle storage calculation without storage definition","status":"passed","title":"should handle storage calculation without storage definition","duration":1,"failureMessages":[]},{"ancestorTitles":["","SDLManager","Edge case coverage for remaining lines"],"fullName":" SDLManager Edge case coverage for remaining lines should handle manifest generation with missing placement profile","status":"passed","title":"should handle manifest generation with missing placement profile","duration":0,"failureMessages":[]},{"ancestorTitles":["","SDLManager","Edge case coverage for remaining lines"],"fullName":" SDLManager Edge case coverage for remaining lines should format memory sizes for different units","status":"passed","title":"should format memory sizes for different units","duration":1,"failureMessages":[]}],"startTime":1752638666161,"endTime":1752638666184,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/sdl.test.ts"},{"assertionResults":[{"ancestorTitles":["","WalletManager","constructor"],"fullName":" WalletManager constructor should create WalletManager instance with provider","status":"passed","title":"should create WalletManager instance with provider","duration":2,"failureMessages":[]},{"ancestorTitles":["","WalletManager","connectWallet"],"fullName":" WalletManager connectWallet should connect to wallet provider successfully","status":"passed","title":"should connect to wallet provider successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","connectWallet"],"fullName":" WalletManager connectWallet should throw NetworkError when wallet connection fails","status":"passed","title":"should throw NetworkError when wallet connection fails","duration":2,"failureMessages":[]},{"ancestorTitles":["","WalletManager","disconnectWallet"],"fullName":" WalletManager disconnectWallet should disconnect from wallet provider successfully","status":"passed","title":"should disconnect from wallet provider successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","disconnectWallet"],"fullName":" WalletManager disconnectWallet should handle disconnect when no wallet is connected","status":"passed","title":"should handle disconnect when no wallet is connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","disconnectWallet"],"fullName":" WalletManager disconnectWallet should throw NetworkError when wallet disconnection fails","status":"passed","title":"should throw NetworkError when wallet disconnection fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getAccounts"],"fullName":" WalletManager getAccounts should get accounts when wallet is connected","status":"passed","title":"should get accounts when wallet is connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getAccounts"],"fullName":" WalletManager getAccounts should throw ValidationError when no wallet is connected","status":"passed","title":"should throw ValidationError when no wallet is connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getAccounts"],"fullName":" WalletManager getAccounts should throw NetworkError when getAccounts fails","status":"passed","title":"should throw NetworkError when getAccounts fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getBalance"],"fullName":" WalletManager getBalance should get wallet balance successfully","status":"passed","title":"should get wallet balance successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getBalance"],"fullName":" WalletManager getBalance should return fallback balance when client.getBalance is not available","status":"passed","title":"should return fallback balance when client.getBalance is not available","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getBalance"],"fullName":" WalletManager getBalance should throw ValidationError for empty address","status":"passed","title":"should throw ValidationError for empty address","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getBalance"],"fullName":" WalletManager getBalance should throw NetworkError when getBalance fails","status":"passed","title":"should throw NetworkError when getBalance fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","sendTransaction"],"fullName":" WalletManager sendTransaction should send transaction successfully","status":"passed","title":"should send transaction successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","sendTransaction"],"fullName":" WalletManager sendTransaction should throw ValidationError when no wallet is connected","status":"passed","title":"should throw ValidationError when no wallet is connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","sendTransaction"],"fullName":" WalletManager sendTransaction should throw ValidationError when from address is missing","status":"passed","title":"should throw ValidationError when from address is missing","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","sendTransaction"],"fullName":" WalletManager sendTransaction should throw ValidationError when messages are missing","status":"passed","title":"should throw ValidationError when messages are missing","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","sendTransaction"],"fullName":" WalletManager sendTransaction should throw NetworkError when signTransaction fails","status":"passed","title":"should throw NetworkError when signTransaction fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","signMessage"],"fullName":" WalletManager signMessage should sign message successfully","status":"passed","title":"should sign message successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","signMessage"],"fullName":" WalletManager signMessage should throw ValidationError when no wallet is connected","status":"passed","title":"should throw ValidationError when no wallet is connected","duration":2,"failureMessages":[]},{"ancestorTitles":["","WalletManager","signMessage"],"fullName":" WalletManager signMessage should throw ValidationError when message is empty","status":"passed","title":"should throw ValidationError when message is empty","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","signMessage"],"fullName":" WalletManager signMessage should throw NetworkError when signMessage fails","status":"passed","title":"should throw NetworkError when signMessage fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getTransactionHistory"],"fullName":" WalletManager getTransactionHistory should get transaction history successfully","status":"passed","title":"should get transaction history successfully","duration":3,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getTransactionHistory"],"fullName":" WalletManager getTransactionHistory should limit transaction history results","status":"passed","title":"should limit transaction history results","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getTransactionHistory"],"fullName":" WalletManager getTransactionHistory should throw ValidationError for empty address","status":"passed","title":"should throw ValidationError for empty address","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getTransactionHistory"],"fullName":" WalletManager getTransactionHistory should throw NetworkError when searchTx fails","status":"passed","title":"should throw NetworkError when searchTx fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","simulateTransaction"],"fullName":" WalletManager simulateTransaction should simulate transaction successfully","status":"passed","title":"should simulate transaction successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","simulateTransaction"],"fullName":" WalletManager simulateTransaction should use default gas price when not provided","status":"passed","title":"should use default gas price when not provided","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","simulateTransaction"],"fullName":" WalletManager simulateTransaction should throw ValidationError when from address is missing","status":"passed","title":"should throw ValidationError when from address is missing","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","simulateTransaction"],"fullName":" WalletManager simulateTransaction should throw ValidationError when messages are missing","status":"passed","title":"should throw ValidationError when messages are missing","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","simulateTransaction"],"fullName":" WalletManager simulateTransaction should throw NetworkError when simulation fails","status":"passed","title":"should throw NetworkError when simulation fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","isWalletConnected"],"fullName":" WalletManager isWalletConnected should return true when wallet is connected","status":"passed","title":"should return true when wallet is connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","isWalletConnected"],"fullName":" WalletManager isWalletConnected should return false when no wallet is connected","status":"passed","title":"should return false when no wallet is connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","isWalletConnected"],"fullName":" WalletManager isWalletConnected should return false when wallet isConnected returns false","status":"passed","title":"should return false when wallet isConnected returns false","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getWalletProvider"],"fullName":" WalletManager getWalletProvider should return connected wallet provider","status":"passed","title":"should return connected wallet provider","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getWalletProvider"],"fullName":" WalletManager getWalletProvider should return null when no wallet is connected","status":"passed","title":"should return null when no wallet is connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","transfer"],"fullName":" WalletManager transfer should transfer tokens successfully","status":"passed","title":"should transfer tokens successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","transfer"],"fullName":" WalletManager transfer should transfer tokens without memo","status":"passed","title":"should transfer tokens without memo","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","delegate"],"fullName":" WalletManager delegate should delegate tokens successfully","status":"passed","title":"should delegate tokens successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","delegate"],"fullName":" WalletManager delegate should delegate tokens with memo","status":"passed","title":"should delegate tokens with memo","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","delegate"],"fullName":" WalletManager delegate should throw NetworkError when delegation fails","status":"passed","title":"should throw NetworkError when delegation fails","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","undelegate"],"fullName":" WalletManager undelegate should undelegate tokens successfully","status":"passed","title":"should undelegate tokens successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","undelegate"],"fullName":" WalletManager undelegate should undelegate tokens with memo","status":"passed","title":"should undelegate tokens with memo","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","undelegate"],"fullName":" WalletManager undelegate should throw NetworkError when undelegation fails","status":"passed","title":"should throw NetworkError when undelegation fails","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","claimRewards"],"fullName":" WalletManager claimRewards should claim staking rewards successfully","status":"passed","title":"should claim staking rewards successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","claimRewards"],"fullName":" WalletManager claimRewards should claim rewards with memo","status":"passed","title":"should claim rewards with memo","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","send"],"fullName":" WalletManager send should send tokens successfully","status":"passed","title":"should send tokens successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","send"],"fullName":" WalletManager send should send tokens without memo","status":"passed","title":"should send tokens without memo","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","send"],"fullName":" WalletManager send should throw ValidationError for missing parameters","status":"passed","title":"should throw ValidationError for missing parameters","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","send"],"fullName":" WalletManager send should throw ValidationError for invalid address format","status":"passed","title":"should throw ValidationError for invalid address format","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","send"],"fullName":" WalletManager send should throw ValidationError for insufficient balance","status":"passed","title":"should throw ValidationError for insufficient balance","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","send"],"fullName":" WalletManager send should throw NetworkError when send fails","status":"passed","title":"should throw NetworkError when send fails","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","estimateGas"],"fullName":" WalletManager estimateGas should estimate gas successfully","status":"passed","title":"should estimate gas successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","estimateGas"],"fullName":" WalletManager estimateGas should throw NetworkError when gas estimation fails","status":"passed","title":"should throw NetworkError when gas estimation fails","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getDelegations"],"fullName":" WalletManager getDelegations should get delegations successfully","status":"passed","title":"should get delegations successfully","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","getDelegations"],"fullName":" WalletManager getDelegations should throw NetworkError when getDelegations fails","status":"passed","title":"should throw NetworkError when getDelegations fails","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should validate correct Akash account address","status":"passed","title":"should validate correct Akash account address","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should validate correct validator address","status":"passed","title":"should validate correct validator address","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should reject invalid address format","status":"passed","title":"should reject invalid address format","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should reject address with wrong prefix","status":"passed","title":"should reject address with wrong prefix","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should handle null address","status":"passed","title":"should handle null address","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should handle non-string address","status":"passed","title":"should handle non-string address","duration":0,"failureMessages":[]},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should handle address with correct prefix but wrong length","status":"passed","title":"should handle address with correct prefix but wrong length","duration":1,"failureMessages":[]},{"ancestorTitles":["","WalletManager","validateAddress"],"fullName":" WalletManager validateAddress should handle validator address with correct prefix but wrong length","status":"passed","title":"should handle validator address with correct prefix but wrong length","duration":0,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","connect"],"fullName":" KeplrWallet connect should throw error when keplr is not available","status":"passed","title":"should throw error when keplr is not available","duration":0,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","connect"],"fullName":" KeplrWallet connect should connect successfully when keplr is available","status":"passed","title":"should connect successfully when keplr is available","duration":1,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","connect"],"fullName":" KeplrWallet connect should handle connection error","status":"passed","title":"should handle connection error","duration":0,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","disconnect"],"fullName":" KeplrWallet disconnect should disconnect successfully","status":"passed","title":"should disconnect successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","getAccounts"],"fullName":" KeplrWallet getAccounts should throw error when keplr is not connected","status":"passed","title":"should throw error when keplr is not connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","getAccounts"],"fullName":" KeplrWallet getAccounts should get accounts when keplr is connected","status":"passed","title":"should get accounts when keplr is connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","signTransaction"],"fullName":" KeplrWallet signTransaction should throw error when keplr is not connected","status":"passed","title":"should throw error when keplr is not connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","signTransaction"],"fullName":" KeplrWallet signTransaction should sign transaction when keplr is connected","status":"passed","title":"should sign transaction when keplr is connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","signMessage"],"fullName":" KeplrWallet signMessage should throw error when keplr is not connected","status":"passed","title":"should throw error when keplr is not connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","signMessage"],"fullName":" KeplrWallet signMessage should sign message when keplr is connected","status":"passed","title":"should sign message when keplr is connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","isConnected"],"fullName":" KeplrWallet isConnected should return false when keplr is null","status":"passed","title":"should return false when keplr is null","duration":0,"failureMessages":[]},{"ancestorTitles":["","KeplrWallet","isConnected"],"fullName":" KeplrWallet isConnected should return true when keplr is connected","status":"passed","title":"should return true when keplr is connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","connect"],"fullName":" CosmostationWallet connect should throw error when cosmostation is not available","status":"passed","title":"should throw error when cosmostation is not available","duration":1,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","connect"],"fullName":" CosmostationWallet connect should connect successfully when cosmostation is available","status":"passed","title":"should connect successfully when cosmostation is available","duration":0,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","connect"],"fullName":" CosmostationWallet connect should handle connection error","status":"passed","title":"should handle connection error","duration":0,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","disconnect"],"fullName":" CosmostationWallet disconnect should disconnect successfully","status":"passed","title":"should disconnect successfully","duration":1,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","getAccounts"],"fullName":" CosmostationWallet getAccounts should throw error when cosmostation is not connected","status":"passed","title":"should throw error when cosmostation is not connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","getAccounts"],"fullName":" CosmostationWallet getAccounts should get accounts when cosmostation is connected","status":"passed","title":"should get accounts when cosmostation is connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","signTransaction"],"fullName":" CosmostationWallet signTransaction should throw error when cosmostation is not connected","status":"passed","title":"should throw error when cosmostation is not connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","signTransaction"],"fullName":" CosmostationWallet signTransaction should sign transaction when cosmostation is connected","status":"passed","title":"should sign transaction when cosmostation is connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","signMessage"],"fullName":" CosmostationWallet signMessage should throw error when cosmostation is not connected","status":"passed","title":"should throw error when cosmostation is not connected","duration":1,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","signMessage"],"fullName":" CosmostationWallet signMessage should sign message when cosmostation is connected","status":"passed","title":"should sign message when cosmostation is connected","duration":0,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","isConnected"],"fullName":" CosmostationWallet isConnected should return false when cosmostation is null","status":"passed","title":"should return false when cosmostation is null","duration":0,"failureMessages":[]},{"ancestorTitles":["","CosmostationWallet","isConnected"],"fullName":" CosmostationWallet isConnected should return true when cosmostation is connected","status":"passed","title":"should return true when cosmostation is connected","duration":0,"failureMessages":[]}],"startTime":1752638666159,"endTime":1752638666200,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/modules/wallet.test.ts"},{"assertionResults":[{"ancestorTitles":["","Utils","validateConfig"],"fullName":" Utils validateConfig should validate valid config","status":"passed","title":"should validate valid config","duration":3,"failureMessages":[]},{"ancestorTitles":["","Utils","validateConfig"],"fullName":" Utils validateConfig should throw for missing rpcEndpoint","status":"passed","title":"should throw for missing rpcEndpoint","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","validateConfig"],"fullName":" Utils validateConfig should throw for invalid rpcEndpoint URL","status":"passed","title":"should throw for invalid rpcEndpoint URL","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","validateConfig"],"fullName":" Utils validateConfig should throw for missing chainId","status":"passed","title":"should throw for missing chainId","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","formatAKT"],"fullName":" Utils formatAKT should format AKT correctly from string","status":"passed","title":"should format AKT correctly from string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","formatAKT"],"fullName":" Utils formatAKT should format AKT correctly from number","status":"passed","title":"should format AKT correctly from number","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","formatAKT"],"fullName":" Utils formatAKT should handle custom decimals","status":"passed","title":"should handle custom decimals","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","parseAKT"],"fullName":" Utils parseAKT should parse AKT correctly","status":"passed","title":"should parse AKT correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","parseAKT"],"fullName":" Utils parseAKT should handle custom decimals","status":"passed","title":"should handle custom decimals","duration":0,"failureMessages":[]},{"ancestorTitles":["","Utils","sleep"],"fullName":" Utils sleep should resolve after specified time","status":"passed","title":"should resolve after specified time","duration":11,"failureMessages":[]},{"ancestorTitles":["","Utils","retry"],"fullName":" Utils retry should succeed on first try","status":"passed","title":"should succeed on first try","duration":1,"failureMessages":[]},{"ancestorTitles":["","Utils","retry"],"fullName":" Utils retry should retry on failure and eventually succeed","status":"passed","title":"should retry on failure and eventually succeed","duration":11,"failureMessages":[]},{"ancestorTitles":["","Utils","retry"],"fullName":" Utils retry should throw after max retries","status":"passed","title":"should throw after max retries","duration":31,"failureMessages":[]}],"startTime":1752638666164,"endTime":1752638666222,"status":"passed","message":"","name":"/home/andrew/akashjs/packages/core/src/utils/index.test.ts"}]}
